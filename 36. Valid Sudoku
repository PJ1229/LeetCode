//dsa progress: i completed it by myself! i believe this has O(n^2) time and O(n) space complexities? not sure. happy with this solution despite being far from optimal

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {

        // check board size
        if(board.size() != 9){
            return false;
        }
        for(int i=0; i<board.size(); i++){
            if(board[i].size() != 9){
                return false;
            }
        }

        // row, column, subboard frequency
        unordered_map<char,int> row_frequency;
        unordered_map<char,int> column_frequency;
        vector<vector<pair<int, int>>> subboards = { //sub board indicies
            {{0, 0}, {0, 1}, {0, 2}, {1, 0}, {1, 1}, {1, 2}, {2, 0}, {2, 1}, {2, 2}},
            {{0, 3}, {0, 4}, {0, 5}, {1, 3}, {1, 4}, {1, 5}, {2, 3}, {2, 4}, {2, 5}},
            {{0, 6}, {0, 7}, {0, 8}, {1, 6}, {1, 7}, {1, 8}, {2, 6}, {2, 7}, {2, 8}},
            {{3, 0}, {3, 1}, {3, 2}, {4, 0}, {4, 1}, {4, 2}, {5, 0}, {5, 1}, {5, 2}},
            {{3, 3}, {3, 4}, {3, 5}, {4, 3}, {4, 4}, {4, 5}, {5, 3}, {5, 4}, {5, 5}},
            {{3, 6}, {3, 7}, {3, 8}, {4, 6}, {4, 7}, {4, 8}, {5, 6}, {5, 7}, {5, 8}},
            {{6, 0}, {6, 1}, {6, 2}, {7, 0}, {7, 1}, {7, 2}, {8, 0}, {8, 1}, {8, 2}},
            {{6, 3}, {6, 4}, {6, 5}, {7, 3}, {7, 4}, {7, 5}, {8, 3}, {8, 4}, {8, 5}},
            {{6, 6}, {6, 7}, {6, 8}, {7, 6}, {7, 7}, {7, 8}, {8, 6}, {8, 7}, {8, 8}}
        };
        unordered_map<char,int> subboard_frequency;
        for(int i=0; i<9; i++){
            for(int j=0; j<9; j++){
                if(board[i][j] != '.'){
                    row_frequency[board[i][j]]++;
                }
                if(board[j][i] != '.'){
                    column_frequency[board[j][i]]++;
                }
                int subboard_row = subboards[i][j].first;
                int subboard_column = subboards[i][j].second;
                if(board[subboard_row][subboard_column] != '.'){
                    subboard_frequency[board[subboard_row][subboard_column]]++;
                }
                if(row_frequency[board[i][j]] > 1 || column_frequency[board[j][i]] > 1 || subboard_frequency[board[subboard_row][subboard_column]] > 1){
                    return false;
                }

            }
            row_frequency.clear();
            column_frequency.clear();
            subboard_frequency.clear();
        }
        return true;
    }
};
