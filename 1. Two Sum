class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        // initialize map
        unordered_map<int,int> map;
        // add values of nums to map with indices
        for(int i = 0; i < nums.size(); i++){
            map[nums[i]] = i;
        }
        // iterate through map
        for(int i = 0; i < nums.size(); i++){
            // calculate difference in target and current array iteration
            int diff = target - nums[i];
            // debugging
            cout << "diff: " << diff << endl;
            // check if difference is contained in the map
            if(map.count(diff) > 0 && map[diff] != i){
                // debugging
                cout << "i: " << i << endl;
                cout << "map.count(diff): " << map.count(diff) << endl;
                cout << "map[diff]: " << map[diff] << endl;
                // return the indices of the number from array and map
                return{i, map[diff]};
            }
        }
    }
};
